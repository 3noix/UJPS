include "target.tmh"
include "macros_StarCitizen_30.ttm"
include "fct_control_modes.c"
include "fct_shields.c"
include "fct_targeting.c"
include "fct_trims.c"

char B_SHIELDS_HORZ_MODE;
char NUM_TARGET_MODE;
char LAST_CONTROL_MODE;


int main()
{
	B_SHIELDS_HORZ_MODE = 1;
	NUM_TARGET_MODE     = 1;	// 1=hostiles, 2=all, 3=friends, 4=pinned
	LAST_CONTROL_MODE   = -1;	// 0=ground, 1=landing, 2=cruise
	
	// exclude other devices
	Configure(&HCougar, MODE_EXCLUDED);
	Configure(&T16000, MODE_EXCLUDED);
	Configure(&LMFD, MODE_EXCLUDED);
	Configure(&RMFD, MODE_EXCLUDED);
	
	// initialisation
	if(Init(&EventHandle)) return 1;
	//SetKBRate(32,50); // pulse time, then delay time
	SetKBRate(60,50); // pulse time, then delay time
	SetKBLayout(KB_FR); // french keyboard
	DXSetAxis(DX_SLIDER_AXIS, 0); // axe de strafe vertical initialise a 0
	ActKey(PULSE+KEYON+LED(&Throttle,LED_INTENSITY,0)); // to turn off the fucking back-lighting
	
	// IOUMD layers
	//SetShiftButton(&Throttle,MSD,&Throttle,BSF,BSB,0);
	SetShiftButton(&Throttle,MSD,&Throttle,0,0,0);
	
	// CONTROL MODES AND LANDING
	// initialisation of control modes
	if (Throttle[APALT])      {setControlsGround();}
	else if (Throttle[APAH])  {setControlsFlightLanding();}
	else if (Throttle[APATT]) {setControlsFlightCruise();}
	// set transitions between control modes
	MapKey(&Throttle, APALT, EXEC("setControlsGround();"));
	MapKey(&Throttle, APAH,  EXEC("setControlsFlightLanding();"));
	MapKey(&Throttle, APPAT, EXEC("setControlsFlightCruise();"));
	// landing
	MapKey(&Throttle, APENG, LandingSystemToggle);
	
	// throttle slider for power in relative (no axis provided for absolute power)
	SetSCurve(&Throttle, THR_FC,    DeadZone_L, DeadZone_C, DeadZone_R, 0, 0);
	KeyAxis(&Throttle, THR_FC, 0, AXMAP2(LIST(0,1,99,100), IncreasePower, 0, DecreasePower));
	
	// brakes, boost, modes, radar, quantum drive
	MapKey(&Throttle, MSL, CycleAmmoBack);
	MapKey(&Throttle, MSU, CycleRadarRange);
	MapKey(&Throttle, MSR, CycleAmmo);
	MapKey(&Throttle, MSD, 0); // deja utilise pour le shift
	MapKey(&Throttle, SPDF, Afterburner);
	MapKey(&Throttle, SPDB, Boost);
	MapKey(&Throttle, BSB, SpaceBrake);
	MapKey(&Throttle, BSF, EXEC("if (!Throttle[LDGH]) ActKey(KEYON+DecoupledModeToggle);"));
	MapKeyR(&Throttle, BSF, EXEC("if (!Throttle[LDGH]) ActKey(KEYON+DecoupledModeToggle);"));
	MapKey(&Throttle, CHB, Autoland);
	MapKey(&Throttle, CHF, QuantumDriveToggle);
	
	// APU button for yaw / roll swap
	MapKey(&Throttle, APUON, SwapYawRollToggle);
	MapKey(&Throttle, APUOFF, SwapYawRollToggle);
	
	// weapons groups, missiles and quick targeting
	MapKey(&Joystick, TG1, FireGroup1);
	MapKey(&Joystick, TG2, FireGroup2); // to shoot 1 and 2 simultaneously with one finger only
	MapKey(&Joystick, S3,  FireGroup2);
	
	// IFCS safeties and look behind (HAT 1)
	MapKey(&Joystick, H1L, GForceSafetyToggle);
	MapKey(&Joystick, H1U, ESPToggle);
	MapKey(&Joystick, H1R, ComstabToggle);
	MapKey(&Joystick, H1D, LookBehind);
	
	// COUNTER-MEASURES (hat 2 L/R)
	MapKey(&Joystick, H2L, CycleCounterMeasures);
	MapKey(&Joystick, H2R, LaunchCounterMeasures);
	
	// STRAFE (HAT 3)
	MapKey(&Joystick, H3L, StrafeLeft);
	MapKey(&Joystick, H3R, StrafeRight);
	
	// TARGET SELECTION (hat 4)
	//MapKey(&Joystick, H4P, XX);
	MapKeyIO(&Joystick, H4L, EXEC("browsePinnedTargets();"),  EXEC("previousTarget();"));
	MapKeyIO(&Joystick, H4R, EXEC("browseAllTargets();"),     EXEC("nextTarget();"));
	MapKeyIO(&Joystick, H4U, EXEC("browseHostileTargets();"), PinFocusedTarget);
	MapKeyIO(&Joystick, H4D, EXEC("browseFriendTargets();"),  AcquireMissileLock);
	
	// POWER
	// switchs on : off
	MapKey(&Throttle, EACON,    EXEC("if (!Throttle[LDGH]) ActKey(KEYON+PowerPreset1Toggle);"));
	MapKey(&Throttle, EACOFF,   EXEC("if (!Throttle[LDGH]) ActKey(KEYON+PowerPreset1Toggle);"));
	MapKey(&Throttle, RDRNRM,   EXEC("if (!Throttle[LDGH]) ActKey(KEYON+PowerPreset2Toggle);"));
	MapKey(&Throttle, RDRDIS,   EXEC("if (!Throttle[LDGH]) ActKey(KEYON+PowerPreset2Toggle);"));
	MapKey(&Throttle, IDLELON,  EXEC("if (!Throttle[LDGH]) ActKey(KEYON+PowerPreset3Toggle);"));
	MapKey(&Throttle, IDLELOFF, EXEC("if (!Throttle[LDGH]) ActKey(KEYON+PowerPreset3Toggle);"));
	// power distribution
	MapKey(&Throttle, CSL, PowerPreset1Increase);
	MapKey(&Throttle, CSD, PowerPreset2Increase);
	MapKey(&Throttle, CSR, PowerPreset3Increase);
	MapKey(&Throttle, CSU, ResetPowerDistribution);
	
	// SHIELDS distribution (slew control)
	MapKey(&Throttle, SC, TEMPO(EXEC("switchShieldsMode();"),ResetShieldsLevels,500));
	KeyAxis(&Throttle, SCX, 0, AXMAP2(LIST(0,8,92,100), ShieldRaiseLeft, 0, ShieldRaiseRight));
	KeyAxis(&Throttle, SCY, 0, AXMAP2(LIST(0,8,92,100), EXEC("shieldsDownArrow();"), EXEC("releaseLongiShieldsButtons();"), EXEC("shieldsUpArrow();")));
	
	// LIGHT AND TRANSPONDER
	MapKey(&Throttle, EFLNORM, EXEC("if (!Throttle[LDGH]) ActKey(KEYON+HeadlightsToggle);"));
	MapKey(&Throttle, EFLOVER, EXEC("if (!Throttle[LDGH]) ActKey(KEYON+HeadlightsToggle);"));
	MapKey(&Throttle, EFRNORM, EXEC("if (!Throttle[LDGH]) ActKey(KEYON+PersonalIdBroadCastToggle);"));
	MapKey(&Throttle, EFROVER, EXEC("if (!Throttle[LDGH]) ActKey(KEYON+PersonalIdBroadCastToggle);"));
	
	// track IR
	MapKey(&Throttle, PSF, TrackIR_Center);
	MapKey(&Throttle, PSB, TrackIR_Pause);
	
	// joystick trim
	MapKey(&Throttle, FLAPU, EXEC("set_dxxy_trims();"));
	MapKey(&Throttle, FLAPD, EXEC("reset_dxxy_trims();"));
}

int EventHandle(int type, alias o, int x)
{
	DefaultMapping(&o, x);
}

